# use local.dev.socrata.net to support solo which resolves to 127.0.0.1
common-host = "local.dev.socrata.net"
common-zk-ensemble = ["local.dev.socrata.net:2181"]

com.socrata.coordinator.common = {
  service-advertisement.address = ${common-host}

  database = {
    host = ${common-host}
    port = 5432
    database = "datacoordinator"
    username = "blist"
    password = "blist"
  }

  # The "instance" is a name for the shard which is referenced by this
  # data coordinator.  It doesn't have any semantic meaning but it is used
  # to form the internal names of datasets and to advertise the server
  # in zookeeper.
  instance = primus

  collocation.group = [primus]

  secondary {
    defaultGroups = [pg]
    groups {
      pg {
        numReplicas = 1
        instances = {
          pg {
            storeCapacityMB = 1000
            acceptingNewDatasets = true
          }
        }
      }
      spandex {
        numReplicas = 1
        instances {
          spandex {
            storeCapacityMB = 0
            acceptingNewDatasets = true
          }
        }
      }
      geocoding {
        numReplicas = 1
        instances {
          geocoding {
            storeCapacityMB = 0 # no actual store
            acceptingNewDatasets = true
          }
        }
      }
    }
    instances {
      # this needs to be here; but should be empty
    }
  }

  log4j {
    logger.com.socrata = INFO # if you want com.socrata components to log noisely you can change this to DEBUG or TRACE
  }
}

com.socrata.coordinator.service = ${com.socrata.coordinator.common} {
  curator.ensemble = ${common-zk-ensemble}
  network.port = 6020 # if you want to run more than one data-coordinator instance you will need to override this
}