<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
    http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

    <changeSet id="20250408-create-purge_copy_map-function" author="mtaylor">
        <sql>
            CREATE OR REPLACE FUNCTION purge_copy_map() RETURNS TRIGGER
    LANGUAGE plpgsql AS
$$
            BEGIN
                WITH to_delete AS (SELECT cm1.system_id
                                   FROM copy_map cm1
                                   WHERE lifecycle_stage = 'Discarded'
                                     AND exists(SELECT 1
                                                FROM copy_map cm2
                                                WHERE cm1.dataset_system_id = cm2.dataset_system_id
                                                  AND cm2.lifecycle_stage = 'Published'
                                                  AND cm2.copy_number > cm1.copy_number)),
                     d1 AS (
                DELETE FROM computation_strategy_map WHERE copy_system_id IN (SELECT system_id FROM to_delete)),
             d2 AS (
                 DELETE FROM column_map_geo_modifiers WHERE copy_system_id IN (SELECT system_id FROM to_delete)),
             d3 AS (
                 DELETE FROM column_map WHERE copy_system_id IN (SELECT system_id FROM to_delete)),
             d4 AS (
                 DELETE FROM index_directive_map WHERE copy_system_id IN (SELECT system_id FROM to_delete)),
             d5 AS (
                 DELETE FROM index_map WHERE copy_system_id IN (SELECT system_id FROM to_delete)),
             d6 AS (
                 DELETE FROM copy_map_table_modifiers WHERE copy_system_id IN (SELECT system_id FROM to_delete)),
             d7 AS (
                 DELETE FROM rollup_map WHERE copy_system_id IN (SELECT system_id FROM to_delete))
                DELETE
                FROM copy_map
                WHERE system_id IN (SELECT system_id FROM to_delete);
                RETURN NULL;
            END;
$$;
        </sql>

        <rollback>
            <sql>
                DROP FUNCTION IF EXISTS purge_copy_map;
            </sql>
        </rollback>
    </changeSet>

    <changeSet id="20250408-create-purge_copy_map-trigger" author="mtaylor">
        <sql>
            CREATE OR REPLACE TRIGGER purge_copy_map_trigger
            AFTER INSERT OR UPDATE
                ON copy_map
                FOR EACH STATEMENT
            EXECUTE FUNCTION purge_copy_map();
        </sql>

        <rollback>
            <sql>
                DROP TRIGGER IF EXISTS purge_copy_map_trigger ON copy_map;
            </sql>
        </rollback>
    </changeSet>

</databaseChangeLog>