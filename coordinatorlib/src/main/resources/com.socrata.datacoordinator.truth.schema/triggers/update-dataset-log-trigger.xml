<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
    http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

    <changeSet author="Marc Slemko" id="update-dataset-log-trigger" runOnChange="true">
        <createProcedure>
            -- This is a bit of a misnomer now that the backup log is
            -- gone.  What this function does is perform post-update
            -- bookeeping in the secondary-manifest and dataset-map
            -- tables when the copy_map changes; the former needs to
            -- be updated so the secondary watchers can get to work
            -- replicating; the latter needs to be updated to keep
            -- its latest_data_version column in sync.
            CREATE OR REPLACE FUNCTION update_backup_log() RETURNS trigger as $update_backup_log$
              BEGIN
                UPDATE secondary_manifest
                  SET went_out_of_sync_at = CURRENT_TIMESTAMP
                  WHERE (secondary_manifest.dataset_system_id, store_id) IN (
                    SELECT dataset_system_id, store_id FROM secondary_manifest
                    WHERE secondary_manifest.dataset_system_id = NEW.dataset_system_id
                    ORDER BY store_id FOR UPDATE
                  )
                  AND latest_data_version = latest_secondary_data_version;
                UPDATE secondary_manifest
                  SET latest_data_version = (
                    SELECT MAX(copy_map.data_version) FROM copy_map WHERE copy_map.dataset_system_id = NEW.dataset_system_id
                  )
                  WHERE (secondary_manifest.dataset_system_id, store_id) IN (
                    SELECT dataset_system_id, store_id FROM secondary_manifest
                    WHERE secondary_manifest.dataset_system_id = NEW.dataset_system_id
                    ORDER BY store_id FOR UPDATE
                  );

                -- and finally dataset_map
                UPDATE dataset_map
                  SET latest_data_version = (
                    SELECT MAX(copy_map.data_version) FROM copy_map WHERE copy_map.dataset_system_id = NEW.dataset_system_id
                  )
                  WHERE dataset_map.system_id = NEW.dataset_system_id;

                RETURN NEW;
              END;
            $update_backup_log$ LANGUAGE PLPGSQL;

            DROP TRIGGER IF EXISTS update_dataset_log_trigger ON copy_map;
            CREATE TRIGGER update_dataset_log_trigger AFTER UPDATE ON copy_map FOR EACH ROW EXECUTE PROCEDURE update_backup_log();
        </createProcedure>

        <rollback>
        </rollback>
    </changeSet>

</databaseChangeLog>
