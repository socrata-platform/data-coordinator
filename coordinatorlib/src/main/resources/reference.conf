com.socrata.coordinator.common {

  log4j {
    rootLogger = [ INFO, console ]
    appender {
      console.class = org.apache.log4j.ConsoleAppender
      console.props {
        layout.class = org.apache.log4j.PatternLayout
      }
    }
  }

  database {
    c3p0 {
      maxPoolSize = 20
      idleConnectionTestPeriod = 60
      testConnectionOnCheckin = true
      preferredTestQuery = "SELECT 1"
      maxIdleTimeExcessConnections = 300
    }
  }

  service-advertisement {
    service-base-path = "/services"
    name = "data-coordinator"
  }

  curator {
    session-timeout = 40s
    connect-timeout = 5s
    max-retries = 29
    base-retry-wait = 100ms
    max-retry-wait = 10s
    namespace = "com.socrata/soda"
  }

  collocation {
    # moves-weight > total-size-bytes-weight + move-size-max-bytes-weight
    cost {
      # let the number of moves be the dominant term for datasets less than 100 MB (1e+8 bytes)
      #
      # 1 * 1.0 + 1e+8 * 0.000000025 + 1e+8 * 0.00000005 = 8.5 (move 1 100 MB dataset)
      # 1 * 1.0 + 1e+7 * 0.000000025 + 1e+7 * 0.00000005 = 1.75 (move 1 10 MB dataset)
      # 5 * 1.0 + 5e+6 * 0.000000025 + 1e+6 * 0.00000005 = 5.175 (move 5 1 MB datasets)
      moves-weight = 1.0 # > 0.0
      total-size-bytes-weight = 0.000000025 # >= 0.0
      move-size-max-bytes-weight = 0.00000005 # >= 0.0
    }

    lock-path = "collocation-lock"
    lock-timeout = 10s // note: it is expected that collocation request should be reasonable fast
  }

  secondary.path = ${user.home}/secondary-stores
}

com.socrata.coordinator.service = ${com.socrata.coordinator.common} {
  network.port = 6020

  liveness-check {
     ## Bind to address of the specific hostname or IP if specified, otherwise use wildcard. This should be set on
     ##  systems with multiple interfaces on the same network or you may risk sending responses from the wrong IP.
     #address = "localhost"
     ## Listen on port if specified, otherwise use ephemeral port.
     #port = 6021
   }

  command-read-limit = 70M
  allow-ddl-on-published-copies = false
  write-lock-timeout = 10 seconds
  # table-cleanup-delay = 14 days
  # sleep between each log table cleanup to throttle the load it places on the db
  log-table-cleanup-sleep-time = 10 seconds
  # when we cleanup a log table, remove entries older than this
  log-table-cleanup-delete-older-than = 30 days
  # look at each log table every two weeks
  log-table-cleanup-delete-every = 14 days

  # Max # of ingestion or mutation threads.  Each one uses some memory, so don't allow too many.
  # Estimate 100MB per thread.
  max-mutation-threads = 15

  # Amount of time to wait for number of mutation threads to fall below max-mutation-threads
  mutation-resource-timeout = 5 minutes

  reports {
    directory = ${java.io.tmpdir}
    index-block-size = 64K
    data-block-size = 64K
  }

  metrics {
    # Should be unique for each service
    prefix = "com.socrata.data.coordinator"
    # log-metrics = true
    # enable-graphite = true
  }

  jetty-threadpool {
    min-threads = 10
    max-threads = 100
    idle-timeout = 5 minutes
    queue-length = 5000
  }

  tablespace = nil

  database.app-name = "data-coordinator"

  log4j.appender.console.props.layout.props.ConversionPattern =
    "%d %p [%t] (%X{X-Socrata-RequestId}) [%X{X-Socrata-Resource}] %c{1} %m%n"
}

com.socrata.coordinator.secondary-watcher = ${com.socrata.coordinator.common} {
  database.app-name = "secondary-watcher"
  database.tcp-keep-alive = true

  # max-retries of 1 means secondary watcher will retry after an error at most 1 more time
  max-retries = 6

  # max-replays of 1 means secondary watcher will replay upon request up to at most 1 more time
  # replaying resets error retry count
  # note: <max-replays> is expected to be large
  max-replays = 200

  # base interval for exponential backoff.  Backoff = <backoff-interval> * 2^(retry#)
  backoff-interval = 5 minutes

  # base interval for waiting to replay.
  # Replay wait = min(<replay-wait> * log(replay# + 2), <max-replay-wait>)
  replay-wait = 2 minutes
  max-replay-wait = 2 hours

  tmpdir = ${java.io.tmpdir}

  log4j.appender.console.props.layout.props.ConversionPattern =
    "%d %p [%t] (%X{job-id}) [%X{dataset-id}] %c{1} %m%n"
}
